Installation Instructions
================================

Dependencies
-------------------------

dependencies will go here (rails, ec2onrails, capistrano, Amazon EC2/S3 setup)

Get the source
-------------------------

fetching the source code instructions will go here



Deploying to EC2
-------------------------


1.  Install the ec2onrails gem as described at http://ec2onrails.rubyforge.org/:

	$ sudo gem install ec2onrails

2.  Find AMI id of the latest 32 bit ec2onrails image (in our case this was ami-5394733a):

	$ cap ec2onrails:ami_ids

3.  Launch an instance of the latest ec2onrails ami and note the returned instance address from ec2-describe-instances, it will be something like ec2-12-xx-xx-xx.z-1.compute-1.amazonaws.com 

	$ ec2-run-instances ami-5394733a -k gsg-keypair
	$ ec2-describe-instances

4.  Create the needed configuration files from the provided examples and edit them, filling in your instance address information, keypairs, and other configuration information as indicated in the comments of each file. See the ec2onrails documentation or source code for more details on each setting.  If you want to make changes to the elasticwulf code, be sure to replace the base github repository in deploy.rb and config.yml with your own github location.

	$ cp config/deploy.rb.example config/deploy.rb
	$ cp config/s3.yml.example config/s3.yml
	$ cp config/config.yml.example config/config.yml
	$ cp config/database.yml.example config/database.yml	
	
	Be sure to substitute in your own AWS key and secret key in both config.yml and s3.yml

	aws_secret_access_key: YYVUYVIUBIBI
	aws_access_key_id: BBKBBOUjbkj/BBOUBOBJKBjbjbboubuBUB

	Also replace the admin user name and password in config.yml:

	admin_user: REPLACE_ME
	admin_password: REPLACE_ME

	This application should be run under SSL and the access should be restricted to 
	only trusted application ip addresses using EC2 security group filters.  Ideally, your
	Client application is also running on EC2 in the same security group.
		
	
5.  Deploy the app to your launched EC2 instance with Capistrano (this wil take several minutes)

    $ cap ec2onrails:setup
    $ cap deploy:cold

6.  Use the admin login information you set in config.yml to access the dashboard from a web browser or as web service at the url of the instance you provided in deploy.rb: https://ec2-12-xx-xx-xx.z-1.compute-1.amazonaws.com . You can also ssh into your running EC2 instance as usual with your keypairs to debug any issues.  See the ec2onrails forums for more help debugging deployment issues.

7.  To redeploy the app after making changes to the base elasticwulf code (this will also restart the delayed_job services which launch and terminate EC2 clusters):

    $ cap deploy

To manually restart the apache service or mongrels:

    $ cap ec2onrails:server:restart_services
    $ cap deploy:restart


Submitting job requests
-------------------------
overview goes here


Using the web dashboard
------------
instructions go here



Submitting jobs to the REST API
------------
instructions go here


Running locally for development
-------------------------

Unless your local machine's ip address and rails port is publicly reachable, local runs will not function properly (the cluster nodes need to communicate with the rails app).

1.  Do the normal rails gem install dance for any missing dependencies

	$ rake gems:install

2.  Create the database

    $ rake db:create
    $ rake db:migrate

3.  Launch the rails app itself 

	$ script/server 
	=> Booting Mongrel
	=> Rails 2.3.2 application starting on http://0.0.0.0:3000
	=> Call with -d to detach
	=> Ctrl-C to shutdown server

4.  Launch a background delayed_job worker in a separate terminal window

	$ rake jobs:work
	(in /Users/pskomoroch/rails_projects/elasticwulf-service)
	*** Starting job worker host:72-63-103-214.pools.spcsdns.net pid:12221
	background cluster launch initiated...
	1 jobs processed at 0.0498 j/s, 0 failed ...
	background cluster shutdown initiated...
	1 jobs processed at 0.0499 j/s, 0 failed ...
	background cluster launch initiated...

5.  Navigate to http://localhost:3000/ to use the web UI or submit REST requests




